/*
  lidar_altimeter

  Monitors altitude using a LIDAR sensor attached via I2C bus and provides
  callouts when certain altitudes are reached.

   Parts based upon "speaker_pcm" (https://playground.arduino.cc/Code/PCMAudio):
   Plays 8-bit PCM audio on pin 11 using pulse-width modulation (PWM).
   For Arduino with Atmega168 at 16 MHz.
   By Michael Smith <michael@hurts.ca>

*/
#include <Wire.h>
#include <LIDARLite.h>
#include <Talkie.h>

Talkie voice;


#include <stdint.h>
#include <avr/interrupt.h>
#include <avr/io.h>
#include <avr/pgmspace.h>

// Voice sample list
const uint8_t spTEN[]          PROGMEM = {0x80, 0x80, 0x67, 0xcc, 0x19, 0x70, 0x6c, 0x6a, 0x88, 0x86, 0x55, 0x71, 0xad, 0x30, 0x2d, 0xaa, 0x9e, 0xc3, 0x2a, 0x64, 0xad, 0xb0, 0x79, 0x89, 0xc8, 0xb2, 0x3c, 0xa2, 0x1a, 0x35, 0xa2, 0xca, 0xf6, 0x88, 0x6b, 0xd4, 0xf0, 0x4a, 0xd9, 0x23, 0xab, 0xc9, 0x22, 0x2a, 0x65, 0x8f, 0xaa, 0x25, 0x0b, 0xad, 0x92, 0xdd, 0xba, 0x9a, 0x34, 0xbc, 0x52, 0x76, 0x19, 0x6a, 0xd4, 0xb0, 0x2e, 0xd9, 0x61, 0x2a, 0x91, 0xdd, 0x32, 0xa4, 0x98, 0x29, 0x6b, 0x4c, 0xc9, 0xb4, 0x6d, 0xe6, 0x6a, 0x31, 0x70, 0x22, 0xa1, 0x9b, 0x9b, 0xc5, 0xa0, 0x28, 0x47, 0x62, 0x49, 0x8a, 0x42, 0x2a, 0x1d, 0x91, 0x29, 0x0b, 0x32, 0x8e, 0x48, 0x8c, 0xda, 0x2a, 0xd9, 0xd9, 0xd5, 0x16};
const uint8_t spTWENTY[]          PROGMEM = {0x0c, 0xf8, 0x3a, 0x4b, 0x00, 0x5f, 0x65, 0xb5, 0xa7, 0xfb, 0xae, 0x0c, 0xa9, 0xd3, 0xa2, 0x12, 0x32, 0x3b, 0xcd, 0x49, 0x8a, 0x53, 0xcc, 0xac, 0xca, 0xa4, 0x21, 0xf5, 0x3e, 0xdd, 0xdd, 0xec, 0xb8, 0x54, 0xcd, 0x32, 0xf1, 0x48, 0x52, 0x92, 0x50, 0xdb, 0xc5, 0xac, 0xca, 0x4a, 0xb2, 0xaf, 0x74, 0xd5, 0x2a, 0x27, 0xa9, 0x3e, 0xdd, 0xd5, 0x2b, 0xaf, 0xb4, 0x86, 0x70, 0xd3, 0x88, 0x32, 0xb2, 0xea, 0xd5, 0x25, 0xd2, 0x76, 0xc8, 0x93, 0xe4, 0xd4, 0x4e, 0x5b, 0xa6, 0x34, 0xc2, 0x72, 0x3c, 0xad, 0xb8, 0x7a, 0x70, 0x63, 0x89, 0xb0, 0xcc, 0x80, 0xa3, 0xc3, 0x18, 0xb0, 0x43, 0x51, 0x1b, 0xba, 0x63, 0x76, 0xef, 0x28, 0x6d, 0x6c, 0x9e, 0x24, 0x72, 0xa2, 0xa6, 0x31, 0x4b, 0xb1, 0xa9, 0x88, 0x9a, 0xc6, 0x22, 0xc8, 0xbb, 0xcb, 0x6c, 0x1a, 0x9b, 0x22, 0xad, 0x6e, 0x33, 0x69, 0xea, 0x92, 0xa4, 0x26, 0xa3, 0xa4, 0xb9, 0x1b, 0xe4, 0x9c, 0x0c, 0x13, 0xe6, 0x26, 0x48, 0xbb, 0xd3, 0xa8, 0x9b, 0x9b, 0x44, 0xaf, 0x49, 0xb1, 0x66, 0xae, 0x1c, 0xb5, 0xc7, 0xa5, 0x88, 0x75, 0x58, 0xa4, 0x28, 0xb7, 0xc6, 0xfe, 0x61, 0x88, 0x3d, 0xcc, 0x2a, 0xfa, 0xa7, 0x11, 0x11, 0x37, 0x2b};
const uint8_t spTHIRTY[]          PROGMEM = {0x0c, 0x98, 0xb1, 0x93, 0x01, 0x2b, 0x74, 0x0a, 0x60, 0x86, 0x29, 0x02, 0xcc, 0x30, 0x45, 0x80, 0xe5, 0x2b, 0x4b, 0x34, 0x7d, 0xb8, 0x69, 0x24, 0x1d, 0x51, 0x76, 0xa6, 0x69, 0x1d, 0x79, 0xc5, 0xd9, 0x9b, 0xa5, 0x75, 0x95, 0x11, 0xa7, 0xc8, 0xe9, 0xd9, 0x56, 0x5a, 0x52, 0x0a, 0xa5, 0x79, 0x95, 0x6d, 0x69, 0xe9, 0x94, 0xa6, 0x31, 0x36, 0xe5, 0x65, 0x60, 0x99, 0xe6, 0xb0, 0x50, 0x96, 0x01, 0xad, 0xda, 0xc5, 0x42, 0x53, 0x06, 0x94, 0x58, 0x17, 0x0b, 0x5d, 0x69, 0x50, 0x1c, 0x55, 0x26, 0xf4, 0x4d, 0xb3, 0x49, 0x46, 0xed, 0x32, 0x34, 0xc3, 0xec, 0xdd, 0x95, 0xcb, 0x58, 0x25, 0x73, 0x4e, 0x55, 0x4e, 0x63, 0x13, 0xe8, 0xd9, 0x1d, 0x39, 0x8c, 0x8d, 0x91, 0xd6, 0x66, 0x90, 0x30, 0x55, 0x41, 0x5a, 0x9b, 0x61, 0xdc, 0xd4, 0x04, 0x6a, 0x6f, 0x99, 0x36, 0x73, 0xa6, 0x14, 0x3d, 0x41, 0x45, 0x2c, 0x8d, 0x23, 0xe7, 0x84, 0x15, 0xb1, 0x0d, 0x8d, 0xec, 0x61, 0x52, 0xd9, 0x3d, 0x23, 0xb3, 0x87, 0x4b};
const uint8_t spFORTY[]          PROGMEM = {0x06, 0xef, 0xe9, 0x2b, 0xcb, 0xe2, 0x86, 0x7f, 0xc4, 0xc9, 0x70, 0x8f, 0x43, 0x80, 0x19, 0x26, 0x09, 0x30, 0x5d, 0x45, 0x79, 0x86, 0x0d, 0xf7, 0x88, 0x38, 0x2d, 0x0e, 0x36, 0xcb, 0x4c, 0xe3, 0xa4, 0xd8, 0x94, 0x2a, 0x52, 0x9b, 0x9b, 0x12, 0x35, 0xdb, 0xc9, 0xb2, 0xb5, 0x4b, 0xe5, 0x6e, 0x47, 0xaf, 0x55, 0x21, 0x95, 0xa7, 0x54, 0x34, 0x3b, 0x87, 0xdc, 0xac, 0x14, 0x75, 0x5f, 0x19, 0x4a, 0xbf, 0x93, 0x2c, 0x75, 0x66, 0xaa, 0xc3, 0x34, 0xca, 0xb2, 0x9a, 0xa1, 0xb5, 0x8d, 0xb3, 0xdc, 0x4a, 0x9b, 0x2e, 0x26, 0x6c, 0x1f, 0xad, 0xe4, 0x86, 0x22, 0xc9, 0xa3, 0x32, 0x66, 0x1b, 0x9a, 0x65, 0xb1, 0xca, 0xda, 0x6d, 0x68, 0x9e, 0xc4, 0xbb, 0xaa, 0xb4, 0xb1, 0x3b, 0x66, 0xeb, 0xaa, 0xd2, 0xc6, 0x61, 0x98, 0x6c, 0xb2, 0x4a, 0x1a, 0x9b, 0x60, 0xa9, 0xf5, 0xd0, 0x61, 0x6a, 0x02, 0xb5, 0xc7, 0xad, 0x98, 0x79, 0x18, 0xe4, 0x1c, 0x37, 0xa3, 0xd6, 0x61, 0x89, 0x34, 0xc3, 0x2a, 0x5b, 0x86, 0x23, 0x8e, 0x30, 0x31, 0x64, 0x9b, 0x59, 0x45, 0x43, 0xa3};
const uint8_t spFIFTY[]          PROGMEM = {0xc6, 0x99, 0xa1, 0xdd, 0xdd, 0x93, 0x84, 0x7b, 0x86, 0xce, 0x30, 0x4b, 0xc2, 0x80, 0x19, 0x3b, 0x05, 0xb0, 0xd2, 0xa4, 0x00, 0xa6, 0x6b, 0x1b, 0x41, 0x51, 0x2a, 0xe9, 0x15, 0x76, 0x85, 0xd5, 0x29, 0x67, 0x74, 0xd4, 0x15, 0x55, 0xad, 0x5a, 0xd1, 0x51, 0x57, 0x5c, 0xac, 0x58, 0xe5, 0x58, 0x6d, 0x49, 0xf3, 0x22, 0xa6, 0x63, 0x35, 0x64, 0xc3, 0x87, 0x2a, 0xbb, 0x15, 0x02, 0x6c, 0xb7, 0x49, 0x80, 0xe7, 0xba, 0xc0, 0xa4, 0xd3, 0x96, 0xbb, 0xa7, 0xdd, 0xf2, 0x0c, 0xaf, 0xac, 0x5a, 0x51, 0x5a, 0xd7, 0x95, 0x70, 0x64, 0x95, 0x29, 0x7d, 0x16, 0xec, 0x33, 0x1d, 0x24, 0xf5, 0x85, 0x53, 0x4e, 0x95, 0xe9, 0x32, 0x36, 0x45, 0x96, 0xd5, 0x61, 0xca, 0xd8, 0x35, 0x71, 0x4c, 0x96, 0x49, 0x53, 0xd7, 0xc4, 0xb9, 0x15, 0x26, 0xcc, 0x4d, 0xa1, 0xe6, 0x74, 0x18, 0x37, 0x0f, 0x03, 0x12, 0x33, 0xa5, 0xcd, 0xdc, 0x15, 0x72, 0x4e, 0x85, 0x51, 0x53, 0x13, 0x48, 0x5e, 0x1e, 0x95, 0xf5, 0xc3, 0x10, 0x7b, 0xb8, 0x15};

const uint8_t spSIXTY[]          PROGMEM = {0x08, 0x98, 0x71, 0x1c, 0x01, 0xc7, 0x6f, 0x11, 0xe0, 0x87, 0x29, 0x06, 0xfc, 0xd2, 0xc1, 0x80, 0xe7, 0x53, 0x5b, 0x98, 0x85, 0x69, 0x66, 0x85, 0x59, 0x61, 0xb1, 0x1c, 0xba, 0xa9, 0x78, 0x85, 0xcd, 0x93, 0x6b, 0xb7, 0xe3, 0x16, 0xf5, 0x82, 0xc6, 0x51, 0x8e, 0x43, 0xdc, 0x9d, 0x60, 0x44, 0x57, 0x42, 0xc0, 0x8c, 0xc9, 0x04, 0x58, 0x3e, 0x98, 0x01, 0x27, 0x6f, 0x22, 0xe0, 0x86, 0x6d, 0x04, 0x6c, 0x1b, 0x4e, 0x80, 0xe3, 0x4b, 0x4b, 0xdf, 0x25, 0x71, 0xc7, 0x44, 0x69, 0x43, 0x93, 0x24, 0x55, 0x63, 0xa5, 0x0c, 0x4d, 0x90, 0x74, 0x8f, 0xe9, 0x32, 0x34, 0x46, 0x3a, 0x3d, 0x66, 0xd2, 0x58, 0x91, 0xd8, 0x4e, 0x58, 0x09, 0x53, 0x21, 0x1c, 0x3b, 0x21, 0xc6, 0x4d, 0x99, 0x70, 0xcc, 0x06, 0x99, 0x30, 0x55, 0x46, 0xda, 0x97, 0x56, 0xc2, 0x9c, 0x18, 0xe7, 0x94, 0x38, 0x31, 0x57, 0xa1, 0xec, 0x55, 0xe2, 0x54, 0x9c, 0x95, 0x92, 0x47, 0xa8, 0x12};

const uint8_t spSEVENTY[]          PROGMEM = {0x08, 0xf8, 0xa1, 0x02, 0x01, 0x3f, 0x55, 0x10, 0x60, 0xfb, 0x49, 0x06, 0x5c, 0x37, 0xc9, 0x80, 0xa5, 0x5c, 0x46, 0x56, 0xad, 0xb8, 0xe5, 0xc6, 0x1e, 0x79, 0xf1, 0x12, 0x56, 0x6b, 0x67, 0xe5, 0x35, 0x4a, 0x48, 0x8f, 0xe3, 0x95, 0xd7, 0xa4, 0xa1, 0x39, 0xb6, 0x57, 0x5e, 0xa3, 0xb9, 0xfb, 0xc4, 0x19, 0x65, 0x49, 0xa6, 0x6e, 0x13, 0xa5, 0x54, 0x25, 0xb8, 0xb8, 0x46, 0x54, 0xd5, 0x25, 0x2b, 0x66, 0xe6, 0x76, 0x4c, 0x5b, 0x8c, 0x49, 0x68, 0x56, 0x69, 0x5d, 0x73, 0x26, 0xa6, 0x1d, 0xa5, 0xf5, 0xcd, 0x8a, 0x99, 0x8e, 0x95, 0x30, 0x24, 0xc9, 0x16, 0x51, 0x56, 0xdc, 0x18, 0x25, 0x8d, 0x96, 0xab, 0x32, 0x63, 0x94, 0x38, 0x96, 0xa1, 0xc8, 0x8d, 0x91, 0x73, 0x8c, 0x87, 0x9d, 0x32, 0x76, 0xc3, 0x9c, 0xd6, 0x51, 0xcb, 0x30, 0x2c, 0xba, 0xd7, 0xd8, 0x2e, 0x43, 0x57, 0x24, 0x99, 0x13, 0xb9, 0x8c, 0x43, 0x93, 0x46, 0x4d, 0x9c, 0x34, 0x0d, 0x41, 0x1c, 0x35, 0x51, 0xc2, 0x34, 0x04, 0x71, 0xd6, 0xc4, 0x71, 0x53, 0x63, 0x24, 0xdd, 0x63, 0x47, 0xcc, 0x85, 0x60, 0x74, 0xa7, 0x14, 0x32, 0x57, 0x82, 0x5a, 0x11, 0x56, 0x50, 0x3d, 0xa4, 0x6a, 0x84, 0x49, 0x06};

const uint8_t spEIGHTY[]          PROGMEM = {0xa3, 0x6c, 0x9e, 0xbc, 0xab, 0xac, 0xac, 0x6c, 0x24, 0x52, 0xab, 0xb2, 0xbc, 0xd2, 0xe1, 0x48, 0xa3, 0x2b, 0x4a, 0x4b, 0x9a, 0x42, 0xeb, 0x2e, 0x2b, 0x2d, 0x6b, 0x12, 0x75, 0x26, 0x2d, 0xb7, 0xbc, 0x1b, 0xd4, 0xee, 0xb2, 0x53, 0xca, 0xa6, 0x50, 0xbb, 0xcb, 0xb6, 0x6b, 0xb2, 0x60, 0xcd, 0x2a, 0xdb, 0xee, 0xaf, 0x82, 0x35, 0x6a, 0xac, 0x94, 0xb6, 0x2b, 0xe2, 0xee, 0x89, 0x52, 0xfa, 0xae, 0x89, 0x6b, 0xc6, 0x72, 0x19, 0x3a, 0x27, 0xee, 0x69, 0x2b, 0x69, 0x6c, 0x8c, 0x79, 0x36, 0xac, 0xa4, 0xb1, 0x6b, 0xe4, 0xd8, 0xb6, 0x93, 0xa6, 0xae, 0x88, 0x6a, 0x2b, 0x8a, 0x99, 0x3a, 0x27, 0xaa, 0xa9, 0x20, 0xea, 0x9f, 0x81, 0xd8, 0x22, 0xa4, 0xb2, 0x6b, 0x46, 0x41, 0x8b, 0xb0, 0x0a};
const uint8_t spNINTY[]          PROGMEM = {0xae, 0xf3, 0x82, 0xfb, 0x34, 0xe4, 0xba, 0xc6, 0x73, 0xaa, 0xb5, 0x8a, 0xdd, 0xea, 0x64, 0xcd, 0x2d, 0x52, 0xca, 0xa8, 0x72, 0xd0, 0xb0, 0x08, 0xc9, 0xad, 0x4c, 0xd5, 0x3c, 0x2d, 0xa5, 0x8c, 0x32, 0x75, 0x4b, 0xf7, 0x90, 0x32, 0x8a, 0xdc, 0x3d, 0xdc, 0xd3, 0x4c, 0xcb, 0x53, 0xb3, 0x0c, 0x0f, 0x29, 0x2d, 0x4f, 0x4d, 0x23, 0x2c, 0xa4, 0x8c, 0x22, 0x17, 0x8d, 0xb0, 0x90, 0xd2, 0xca, 0x92, 0x38, 0xc3, 0x4d, 0xf6, 0xa8, 0x6b, 0xe0, 0xb0, 0x72, 0xd9, 0xa3, 0x6b, 0x81, 0xcd, 0x32, 0xe4, 0xb4, 0xa1, 0x59, 0x32, 0xad, 0x50, 0x1c, 0x86, 0x2c, 0xb1, 0xb4, 0xc2, 0xb5, 0x19, 0xbd, 0xa0, 0x89, 0x48, 0x3b, 0x69, 0x1c, 0x3e, 0x84, 0x5d, 0xe5, 0xa6, 0xa1, 0x1b, 0x26, 0xf7, 0xb2, 0x52, 0x86, 0x26, 0x98, 0xab, 0xdb, 0x4a, 0x1b, 0x87, 0x22, 0xf6, 0x5e, 0xdb, 0x65, 0xec, 0x82, 0x24, 0x7a, 0xac, 0xa4, 0xa9, 0x51, 0x96, 0x9a, 0xb6, 0x12, 0xa6, 0x4a, 0x59, 0x6b, 0x4b, 0x6a, 0x98, 0x0a, 0x65, 0xeb, 0x2d, 0x29, 0x61, 0x6e, 0x9c, 0x29, 0xb7, 0xa3, 0x98, 0x39, 0x4b, 0xf4, 0x4d, 0x97, 0xab, 0xc2, 0x2c, 0x28, 0x8a, 0xd5, 0x29};


const uint8_t spONE[]          PROGMEM = {0xa6, 0xe4, 0x21, 0x46, 0xd4, 0xed, 0xb8, 0x92, 0xfb, 0x1a, 0x13, 0x89, 0x13, 0x0a, 0xe9, 0xbb, 0x55, 0x25, 0x4e, 0xc9, 0x6d, 0x98, 0x12, 0xe5, 0x24, 0x2d, 0x0d, 0x6e, 0x8b, 0x45, 0x52, 0x8f, 0x24, 0x9a, 0x6d, 0x56, 0x49, 0x3c, 0xd2, 0xe8, 0xb6, 0xc8, 0xac, 0xf6, 0xc8, 0x93, 0xdf, 0x64, 0xd5, 0xda, 0xa3, 0x4c, 0x71, 0x5c, 0x4c, 0x62, 0x8f, 0x26, 0xc5, 0x4e, 0x33, 0x8d, 0x33, 0xfa, 0x1c, 0xd3, 0xc2, 0x22, 0x72, 0x1b, 0xb3, 0x73, 0x8d, 0x70, 0xcb, 0x69, 0x4a, 0x9a, 0xcd, 0xbd, 0x6a, 0xbb, 0x39, 0x1a, 0x72, 0xaf, 0x89, 0xed, 0xe6, 0xa4, 0x31, 0xa4, 0xc6, 0xb1, 0x99, 0x93, 0x22, 0x33, 0xdb, 0x38, 0x6c, 0x89, 0x8a, 0x5c, 0xaa, 0xe5, 0x90, 0xb9, 0x18, 0x54, 0xf3, 0x94, 0x02};
const uint8_t spTWO[]          PROGMEM = {0x0a, 0x78, 0x2e, 0xc2, 0x00, 0x3f, 0x97, 0x3b, 0xe0, 0xa5, 0xce, 0x16, 0x0d, 0xed, 0xcc, 0xe6, 0x93, 0x57, 0xd4, 0xac, 0xb2, 0x78, 0xce, 0x5e, 0x51, 0x75, 0x22, 0x9a, 0x35, 0x65, 0xc5, 0xd5, 0xb2, 0x59, 0xd5, 0xec, 0x95, 0x16, 0xcb, 0xe6, 0xd5, 0xb3, 0x5b, 0x9e, 0x8c, 0x78, 0x54, 0x2d, 0x0c, 0x8d, 0x4c, 0xd1, 0x59, 0x61, 0x2a, 0x74, 0x32, 0x45, 0x45, 0x79, 0x61, 0xd7, 0xeb, 0x68, 0xa5, 0x19, 0x63, 0xcd, 0xa0, 0x8b, 0xbb, 0x44, 0x8c, 0x36, 0xa3, 0xcf, 0xa1, 0xec, 0xb6, 0x58, 0x4d, 0x3e, 0x78, 0x08, 0x6b, 0x1a, 0xb6, 0x2a, 0x6f, 0x45, 0xea, 0x49, 0xd1, 0x6a, 0x35, 0xb7, 0xaa, 0x29, 0x45, 0x5b, 0xb4, 0x92, 0x8e, 0xa6, 0x0c};
const uint8_t spTHREE[]          PROGMEM = {0x2e, 0x9e, 0x2e, 0x3d, 0x22, 0x92, 0x84, 0x68, 0xfa, 0x72, 0x0f, 0xaf, 0xad, 0x80, 0xe9, 0x2b, 0x46, 0x3c, 0x7c, 0x8a, 0xa9, 0x25, 0x1e, 0x69, 0xb6, 0xaa, 0xee, 0x1e, 0xbb, 0x64, 0x21, 0x8b, 0x59, 0x86, 0x9d, 0x94, 0xf9, 0xca, 0xae, 0x95, 0x4e, 0x42, 0xee, 0x3a, 0xd6, 0xb8, 0xba, 0x49, 0x79, 0xa8, 0x58, 0x6d, 0x32, 0x3b, 0x95, 0x31, 0x63, 0x8e, 0xd9, 0x98, 0x52, 0x97, 0x0c, 0x91, 0x5e, 0x65, 0x5a, 0x5b, 0x03, 0x71, 0x56, 0x8c, 0x1e, 0x5d, 0x4b, 0x2c, 0x5e, 0x51, 0x65, 0xf4, 0xcd, 0x91, 0xe6, 0x64, 0xe5, 0x32, 0x14, 0xc1, 0xd6, 0x93, 0x96, 0xcb, 0x98, 0x99, 0x5a, 0x8f, 0x5b, 0x69, 0xe3, 0x74, 0x4c, 0x56, 0x15, 0xa7, 0xcc, 0xc3, 0x31, 0x59, 0x77, 0x98, 0xb2, 0x8c, 0xc0, 0xa4, 0x55, 0xb1, 0xc3, 0xda, 0x15, 0x72, 0x4c, 0x87};
const uint8_t spFOUR[]          PROGMEM = { 0x04, 0x58, 0xa9, 0x9b, 0x01, 0xdb, 0x4f, 0x2a, 0x60, 0xa6, 0xce, 0xb6, 0x4d, 0x5f, 0x11, 0x66, 0x71, 0x46, 0x10, 0x55, 0x85, 0xbb, 0x5a, 0x2d, 0x81, 0xee, 0x6d, 0x64, 0x59, 0x2b, 0x85, 0xba, 0x75, 0xa2, 0x46, 0xad, 0x10, 0xeb, 0x36, 0x89, 0x1a, 0x93, 0x5c, 0x22, 0x77, 0x1b, 0x46, 0xcc, 0x36, 0xb9, 0xb8, 0x15, 0x68, 0x31, 0xc5, 0x95, 0x72, 0x57, 0xa0, 0xc7, 0xe4, 0xd0, 0xda, 0x5e, 0x85, 0x6a, 0x8b, 0x52, 0xef, 0x73, 0x37, 0xab, 0xac, 0x4a, 0x43, 0xa8, 0xd9, 0x6c, 0xbc, 0x28, 0x8c, 0xb1, 0xeb, 0x88, 0xc9, 0x98, 0x34, 0xc5, 0xce, 0x6d, 0x66, 0x0d, 0xc3, 0x94, 0x3a, 0x8d, 0x6a, 0x46, 0x76, 0x73, 0x1a, 0xd4, 0xce, 0x51, 0x5a, 0xcd, 0x29, 0x53, 0x86, 0x48, 0x42, 0xb5, 0xe4, 0x24, 0x1e, 0x46, 0x31, 0xc5, 0x5a, 0x2a, 0x47, 0xaa, 0xda };
const uint8_t spFIVE[]          PROGMEM = { 0x80, 0x80, 0xe5, 0x3b, 0x11, 0xb0, 0x7c, 0x85, 0x8b, 0x0a, 0xcf, 0x48, 0x57, 0x27, 0x25, 0x89, 0xb1, 0x3d, 0xc5, 0x9a, 0xb4, 0x34, 0xa6, 0xf6, 0xe2, 0x98, 0xd3, 0xd2, 0x98, 0x26, 0x8a, 0x63, 0x76, 0xcb, 0x52, 0xee, 0x48, 0xce, 0x29, 0x29, 0x8f, 0xbd, 0xcc, 0xb9, 0xc3, 0x94, 0x32, 0xf6, 0x74, 0x93, 0x8a, 0x92, 0xea, 0xb8, 0xdc, 0xcc, 0x4a, 0x4a, 0x6a, 0x63, 0x4d, 0x0d, 0x4b, 0x33, 0xa9, 0x4f, 0xcd, 0x43, 0xb5, 0xa5, 0x84, 0x21, 0x0d, 0x8b, 0xd4, 0x94, 0x1a, 0xc6, 0x9c, 0x35, 0x43, 0x52, 0x68, 0x98, 0x72, 0xb4, 0x0e, 0x4d, 0xb1, 0x61, 0xca, 0x5e, 0x2b, 0x3c, 0x4c, 0x87, 0xa5, 0x18, 0xc9, 0xf2, 0x08, 0x6c, 0xd6, 0xe2, 0xd8, 0xcd, 0xa3, 0x90, 0xda, 0x8a, 0x63, 0x37, 0x8f, 0x32, 0x6c, 0x6d, 0xc6, 0x84, 0x59, 0x1b, 0xab, 0x79, 0x78, 0x57, 0x13, 0xb1, 0x85, 0x80, 0xe9, 0xc3, 0x44, 0x31, 0x5d, 0x85, 0x99, 0x26, 0x01 };
const uint8_t spSIX[]          PROGMEM = {0x04, 0xb8, 0x6e, 0x8b, 0x00, 0x2f, 0x4c, 0x32, 0xe0, 0xf9, 0x0e, 0x06, 0x3c, 0xd7, 0xc9, 0x80, 0xe7, 0xba, 0x52, 0x34, 0xb9, 0x8a, 0x87, 0x2d, 0x1a, 0x71, 0xd1, 0xaa, 0x11, 0x5b, 0x65, 0x24, 0x45, 0xab, 0x65, 0x5c, 0x94, 0x56, 0x64, 0xa3, 0x51, 0xb9, 0x66, 0x4a, 0x93, 0x4c, 0xf8, 0x54, 0x1a, 0x69, 0x63, 0x8b, 0xec, 0x91, 0x55, 0x26, 0x2c, 0x2d, 0xb1, 0x46, 0x64, 0x19, 0x72, 0x56, 0xa3, 0xde, 0xe9, 0xd6, 0x10, 0xd0, 0x9d, 0xb3, 0xcb, 0x5b, 0x2f, 0x49, 0x77, 0x3b, 0x29, 0x1f, 0xee, 0x4a, 0xcd, 0xec, 0x0a, 0xe0, 0x98, 0x59, 0x06, 0x5c, 0xd7, 0xcd, 0x80, 0x1f, 0xab, 0x08, 0xf0, 0x4b, 0x24, 0x01, 0x7e, 0x0c, 0x47, 0xc0, 0xb7, 0xee };
const uint8_t spSEVEN[]          PROGMEM = { 0x08, 0xf8, 0xbe, 0x8a, 0x00, 0xdf, 0x55, 0x32, 0xe0, 0x87, 0x2a, 0x06, 0xfc, 0xd0, 0x25, 0x80, 0x6b, 0x33, 0x5a, 0x5c, 0x9c, 0xb8, 0x66, 0xdb, 0x1e, 0x49, 0x09, 0x92, 0x32, 0x69, 0x7b, 0xa4, 0x25, 0x49, 0x7a, 0x8e, 0x95, 0x96, 0xa7, 0x2c, 0xed, 0xd5, 0x72, 0x4a, 0x11, 0xab, 0x96, 0x67, 0x49, 0x4d, 0x75, 0x2a, 0x5a, 0xee, 0x23, 0xd6, 0xf4, 0x31, 0x6b, 0x84, 0xa7, 0x59, 0x35, 0x66, 0x6d, 0xe2, 0x6a, 0xb5, 0xcb, 0x50, 0xbd, 0x59, 0x48, 0x8e, 0x2d, 0x43, 0x71, 0x66, 0xa1, 0x55, 0x26, 0x8d, 0xd9, 0x6b, 0x84, 0xb7, 0x98, 0x34, 0x65, 0xab, 0x1e, 0x5e, 0x66, 0xcc, 0x1c, 0x0c, 0x95, 0x45, 0x4a, 0x51, 0x73, 0x34, 0x94, 0xbc, 0xa1, 0xc8, 0x2c, 0xd5, 0x92, 0xe3, 0xb8, 0x03, 0xb3, 0x54, 0x47, 0x0e, 0x63, 0x09, 0xc4, 0x52, 0x2c, 0x39, 0xac, 0x35, 0x44, 0x8b, 0xd7, 0x94, 0x72, 0x96, 0x00, 0x2d, 0xc9, 0x50, 0x70, 0x9b, 0x22};
const uint8_t spEIGHT[]          PROGMEM = {0x2d, 0xad, 0x9a, 0xab, 0xda, 0xa5, 0xac, 0xa4, 0x5b, 0xb6, 0xac, 0xb0, 0xb2, 0x92, 0x66, 0xc4, 0xb2, 0xc2, 0xca, 0x48, 0xaa, 0x92, 0x88, 0x0e, 0x2b, 0x23, 0xed, 0x9a, 0x35, 0x3b, 0xa3, 0x8e, 0x62, 0x04, 0x12, 0xef, 0x8a, 0xd2, 0xba, 0x11, 0x89, 0xa3, 0xbb, 0x4a, 0x1a, 0x87, 0x23, 0xac, 0xcd, 0x32, 0x61, 0x1c, 0x9a, 0x30, 0xb6, 0xaa, 0xb8, 0xae, 0x1b, 0xc6, 0x98, 0x1a, 0xc3, 0xf2, 0xa9, 0x9d, 0x34, 0x23, 0x8e, 0x02, 0x96, 0x6b, 0x0b, 0xd7, 0x70, 0x41, 0x9a, 0x55, 0x99, 0xcd, 0xa3, 0x28, 0xab, 0x4d, 0x55, 0x02, 0x8d, 0x56, 0xac, 0x92, 0x65, 0x91, 0x3f, 0x52, 0x90, 0x7a, 0x46 };
const uint8_t spNINE[]          PROGMEM = { 0xa6, 0x91, 0x4a, 0xd6, 0xba, 0x18, 0x9b, 0x4a, 0x6b, 0x9e, 0xe8, 0x51, 0x6c, 0x4a, 0xa9, 0x65, 0x62, 0xc3, 0xd6, 0xc8, 0x8b, 0xd1, 0xd0, 0x4e, 0xd3, 0x2b, 0x2b, 0xce, 0xc3, 0xb3, 0xa2, 0xac, 0x34, 0xc7, 0x0a, 0xf7, 0x8c, 0x32, 0x92, 0x9c, 0xca, 0x3d, 0x32, 0xca, 0x48, 0x73, 0xe8, 0x34, 0xab, 0xa8, 0x23, 0xcd, 0xb1, 0x52, 0x3d, 0xed, 0x8c, 0x3c, 0xc7, 0x0e, 0xf7, 0x8c, 0x33, 0xca, 0x1c, 0x2b, 0xdc, 0x33, 0xce, 0xa8, 0x73, 0x2e, 0x77, 0xcf, 0x38, 0xa3, 0x2b, 0x29, 0x3d, 0xbc, 0xa2, 0x94, 0xa1, 0x64, 0x4b, 0xab, 0xb4, 0xd2, 0xc6, 0x96, 0xd5, 0x3c, 0x3a, 0x4a, 0x99, 0x5b, 0x11, 0xb5, 0xa8, 0xd2, 0x6e, 0x29, 0x1e, 0x33, 0x2b, 0xa4, 0xb0, 0xd5, 0x1b, 0x1a, 0x1d, 0x57, 0xc5, 0xee, 0xa8, 0xb1, 0xf5, 0xdc, 0x21, 0xa9, 0x83, 0x95, 0xe6, 0x32, 0xc7, 0xac, 0xab, 0x9e, 0x82, 0x56, 0x13, 0xa2, 0x3b, 0x6a, 0x4c, 0xb9, 0x74, 0x01 };

const uint8_t spONEHUNDRED[]          PROGMEM = {0xaa, 0xa3, 0x2d, 0x42, 0x22, 0x6d, 0x9b, 0x96, 0xf5, 0x4c, 0x31, 0xb3, 0x9d, 0x2a, 0xdd, 0xba, 0xd0, 0xbd, 0x4e, 0x2a, 0xfc, 0x6c, 0xa1, 0xaa, 0x4a, 0x2d, 0x8d, 0x71, 0x92, 0x34, 0x47, 0x8d, 0x38, 0x85, 0x0e, 0xb2, 0x2c, 0xbd, 0xc2, 0xe2, 0x22, 0x29, 0x23, 0xf2, 0x08, 0xaa, 0xb1, 0xc4, 0xf2, 0xc8, 0x29, 0x8c, 0x5a, 0x5c, 0x5a, 0x63, 0x97, 0x28, 0x49, 0x71, 0x2d, 0x77, 0xbc, 0xe2, 0x66, 0x55, 0x39, 0xd3, 0x4e, 0xcb, 0x9a, 0x62, 0xe7, 0x32, 0xd9, 0x2d, 0xaf, 0x46, 0x8d, 0x2c, 0x6d, 0xb7, 0xa2, 0x9a, 0x50, 0x55, 0x91, 0x3a, 0xf2, 0xaa, 0xc3, 0x54, 0xc4, 0x4a, 0xcb, 0x8b, 0x2e, 0x57, 0x55, 0x2b, 0x2d, 0x4b, 0x39, 0x5d, 0xd5, 0xac, 0x8c, 0x34, 0x95, 0x74, 0x33, 0xb7, 0xb2, 0xd2, 0x1c, 0x23, 0xcc, 0x3c, 0xca, 0xca, 0x4b, 0xb0, 0xd0, 0x70, 0x2b, 0xa5, 0x4c, 0x86, 0x83, 0xdb, 0x62, 0xbb, 0xda, 0x4a, 0x1e, 0x9d, 0xb0, 0x9d, 0xea, 0xd6, 0xd9, 0x34, 0xd4, 0x76, 0x19, 0x6a, 0x65, 0x35, 0xf7, 0xc4, 0x61, 0xcc, 0x05, 0xca, 0xc3, 0x2b, 0x99, 0x31, 0x45, 0xec, 0x70, 0x2f, 0xe2, 0xc6, 0x5c, 0x20, 0x33, 0x74, 0x74, 0x9a, 0x72, 0x42, 0xaf, 0x96, 0xc8, 0x69, 0xca, 0x9e, 0x3c, 0x46, 0x8b, 0x96, 0xb9, 0x06, 0x32, 0x1d, 0x1b, 0x13, 0xe6, 0xe2, 0xc8, 0x64, 0xa3, 0x96, 0x98, 0xb2, 0x43, 0xb3, 0x71, 0xd9, 0xe9, 0x1f, 0xd1, 0xdd, 0x4b, 0x2d, 0x0b, 0x60, 0x67, 0x53, 0x33, 0x4c, 0x8b, 0x2a, 0xae, 0x95, 0xc4, 0xd0, 0xac, 0x1a, 0x85, 0x85};

const uint8_t spRETARD[]          PROGMEM = {0xa2, 0x15, 0x9d, 0xcd, 0xd3, 0x13, 0x9b, 0xc6, 0x17, 0x2a, 0x57, 0x5f, 0x94, 0x9a, 0x94, 0x28, 0xa2, 0x64, 0x76, 0xa9, 0x4b, 0xa2, 0x88, 0x8c, 0xda, 0xa5, 0x29, 0x99, 0xcc, 0x2a, 0x66, 0x85, 0xae, 0x78, 0x32, 0xcd, 0x72, 0x48, 0x86, 0xa8, 0x39, 0xdc, 0xc3, 0xb6, 0x00, 0xae, 0x8e, 0x54, 0xc0, 0x77, 0x19, 0x25, 0xee, 0x22, 0xd4, 0x42, 0x4b, 0xa6, 0x38, 0x06, 0x4b, 0x13, 0x0d, 0xd3, 0xa2, 0x94, 0x3d, 0x43, 0xa5, 0x72, 0x8b, 0x53, 0xf1, 0x0c, 0x93, 0x2a, 0x25, 0x8d, 0x4d, 0x2b, 0xd4, 0xa7, 0xa4, 0x3c, 0x0e, 0x8d, 0x56, 0x3d, 0x9d, 0xaa, 0xd8, 0x35, 0x46, 0x75, 0x76, 0xea, 0xd2, 0x90, 0x6c, 0x95, 0xd9, 0x61, 0x48, 0x8d, 0x73, 0x54, 0xce, 0x84, 0x31, 0x77, 0x8a, 0x31, 0x19, 0xed, 0xc6, 0x3c, 0x30, 0x52, 0x6d, 0xb4, 0x9b, 0x4b, 0x41, 0x8b, 0xd6, 0xd9, 0x66, 0x29, 0x19, 0xd5, 0xc6, 0x1a, 0xab, 0x29, 0x19, 0xd6, 0xa8, 0x70, 0x1c, 0xc6, 0x61, 0xdc, 0xcd, 0xd3, 0xb6, 0xea, 0xbb, 0x0d, 0x66, 0xcd, 0x8a, 0xaa, 0xef, 0xc6, 0x59, 0x22, 0x2a, 0xb1, 0x61, 0xf8, 0x54, 0x36, 0x2d, 0x0d};
LIDARLite myLidarLite;
/*
  Selects one of several preset configurations.

  Parameters
  ----------------------------------------------------------------------------
  configuration:  Default 0.
  0: Default mode, balanced performance.
  1: Short range, high speed. Uses 0x1d maximum acquisition count.
  2: Default range, higher speed short range. Turns on quick termination
      detection for faster measurements at short range (with decreased
      accuracy)
  3: Maximum range. Uses 0xff maximum acquisition count.
  4: High sensitivity detection. Overrides default valid measurement detection
      algorithm, and uses a threshold value for high sensitivity and noise.
  5: Low sensitivity detection. Overrides default valid measurement detection
      algorithm, and uses a threshold value for low sensitivity and noise.
  lidarliteAddress: Default 0x62. Fill in new address here if changed. See
  operating manual for instructions.
*/
#define LIDAR_CONFIG 3

/* Sets, how many readings will be taken each burst */
#define MAX_MEASURES 15

volatile uint16_t audio_count = 0; // Current offset into sample
uint16_t audio_len = 0; // Maximum offset until which we want to play back
uint8_t *audio_data = NULL; // Pointer which to play from, assumed to be in FLASH
unsigned int altitude; // Current altitude in centimeter
byte announced_feet = 0; // Last announced altitude, used when determining if a callout is needed

/** Tries to say a number.
   If number is not available, just skip it.
*/
void say(byte number) {
  signed byte dir = (announced_feet - number) > 0 ? 1 : -1;
  while (1) {
    switch (number) {
      case 0:
        //voice.say(spZERO);
        goto done;
      case 1:
        voice.say(spONE);
        goto done;
      case 2:
        voice.say(spTWO);
        goto done;
      case 3:
        voice.say(spTHREE);
        goto done;
      case 4:
        voice.say(spFOUR);
        goto done;
      case 5:
        voice.say(spFIVE);
        goto done;
      case 6:
        voice.say(spSIX);
        goto done;
      case 7:
        voice.say(spSEVEN);
        goto done;
      case 8:
        voice.say(spEIGHT);
        goto done;
      case 9:
        voice.say(spNINE);
        goto done;
      case 10:
        voice.say(spTEN);
        goto done;
      case 20:
        voice.say(spTWENTY);
        goto done;
      case 30:
        voice.say(spTHIRTY);
        goto done;
      case 40:
        voice.say(spFORTY);
        goto done;
      case 50:
        voice.say(spFIFTY);
        goto done;
      case 60:
        voice.say(spSIXTY);
        goto done;
      case 70:
        voice.say(spSEVENTY);
        goto done;
      case 80:
        voice.say(spEIGHTY);
        goto done;
      case 90:
        voice.say(spNINTY);
        goto done;
      case 100:
        voice.say(spONEHUNDRED);
        goto done;
    }
    number += dir;
  }
done: announced_feet = number;

}

int cmp_func(const unsigned int *a, const unsigned int *b)
{
  signed long x = *a;
  x -= *b;
  if (x > 0)
    return (1);

  if (x < 0)
    return (-1);

  if (x == 0)
    return (0);
}

void loop() {
  static unsigned int distances[MAX_MEASURES];
  byte value_count = 0; // Number of values stored
  byte count_max = 0;   // Maximum buffer array index, may wrap around
  unsigned long until = millis() + 333; // Duration of one measurement burst
  unsigned median;

  memset(distances, 0, sizeof(distances));
  while (millis() < until) {
    // Sleep after getting MAX_MEASURES
    if (value_count == MAX_MEASURES)
      continue;


    // Otherwise (not enough points) try to get more:
    // first get distance in cm
    unsigned int distance = myLidarLite.distance();

    // Only work with plausible values over 10cm and below 50m
    if ( (distance > 10) && (distance < 5000) ) {
      if (value_count > MAX_MEASURES)
        value_count = 0;
      if (count_max < value_count)
        count_max = value_count;
      distances[value_count] = distance;
      value_count += 1;
    }
  }

  // Sort data for processing
  qsort(distances, count_max, sizeof(distances[count_max]), cmp_func);

#ifdef DEBUG
  for (byte x = 0; x < count_max; x++)    Serial.println(distances[x]);
#endif

  // If too few measurements where taken, do not consider this round
  // as we did a sort(), we can be sure the values before where zeroes, too.
  if (  distances[3] == 0 )
  {
    // If no Ground detection, sleep for half a second, then retry.
    delay(500);
    return;
  }

  unsigned int distance = distances[2];
  /* If out of range, it returns very low distances. Disregard, then */
  if (distance > 5)
  {
    altitude = (altitude + distance) >> 1;
    unsigned long int feet = altitude;
    feet *= 100L;
    feet /= 3048L;
    Serial.print(altitude);
    Serial.print(" ");
    Serial.print(announced_feet);
    Serial.print(" ");
    Serial.print(distance);
    Serial.print(" ");
    Serial.println(feet);
    if (feet != announced_feet) {
      say(feet);
    }
  }
}

void setup()
{
  // Init PWM for sound output
  pinMode(3, OUTPUT);

  Serial.begin(115200);
  myLidarLite.begin(LIDAR_CONFIG, true); // Set configuration and I2C to 400 kHz

  myLidarLite.configure(LIDAR_CONFIG);
}


